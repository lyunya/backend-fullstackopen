{"version":3,"sources":["components/Note.js","components/Notification.js","components/LoginForm.js","components/NoteForm.js","components/Togglable.js","components/Footer.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","onSubmit","id","value","onChange","type","NoteForm","createNote","useState","newNote","setNewNote","event","preventDefault","target","Togglable","React","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","buttonLabel","children","displayName","Footer","color","fontStyle","fontSize","token","getAll","axios","get","then","response","data","create","newObject","a","config","headers","Authorization","post","update","put","setToken","newToken","login","credentials","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","setUsername","setPassword","user","setUser","noteFormRef","createRef","useEffect","noteService","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","addNote","noteObject","current","returnedNote","concat","handleLogin","loginService","setItem","stringify","setTimeout","notesToShow","filter","name","map","i","key","find","n","changedNote","catch","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01694622.chunk.js","sourcesContent":["\nimport React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nconst LoginForm = ({\n  handleSubmit,\n  handleUsernameChange,\n  handlePasswordChange,\n  username,\n  password\n}) => {\n  return (\n    <div>\n      <h2>Login</h2>\n      <form onSubmit={handleSubmit}>\n        <div>\n          username\n          <input\n            id='username'\n            value={username}\n            onChange={handleUsernameChange}\n          />\n        </div>\n        <div>\n          password\n          <input\n            id='password'\n            type=\"password\"\n            value={password}\n            onChange={handlePasswordChange}\n          />\n        </div>\n        <button id=\"login-button\" type=\"submit\">\n          login\n        </button>\n      </form>\n    </div>\n  )\n}\n\nLoginForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  handleUsernameChange: PropTypes.func.isRequired,\n  handlePasswordChange: PropTypes.func.isRequired,\n  username: PropTypes.string.isRequired,\n  password: PropTypes.string.isRequired\n}\n\nexport default LoginForm","\nimport React, { useState } from 'react'\n\nconst NoteForm = ({ createNote }) => {\n  const [newNote, setNewNote] = useState('')\n\n  const handleChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    createNote({\n      content: newNote,\n      important: false,\n    })\n\n    setNewNote('')\n  }\n\n  return (\n    <div>\n      <h2>Create a new note</h2>\n\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default NoteForm","\nimport React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible} className=\"togglableContent\">\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n})\n\nTogglable.displayName = 'Togglable'\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n\nexport default Togglable","import React from 'react'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Leon Marbukh</em>\n    </div>\n  )\n}\n\nexport default Footer","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, setToken }","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\nimport NoteForm from './components/NoteForm'\nimport Togglable from './components/Togglable'\nimport Footer from './components/Footer'\nimport noteService from './services/notes'\nimport loginService from './services/login'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  const noteFormRef = React.createRef()\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n\n  const addNote = (noteObject) => {\n    noteFormRef.current.toggleVisibility()\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n      })\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(() => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const user = await loginService.login({\n        username, password,\n      })\n\n      window.localStorage.setItem(\n        'loggedNoteappUser', JSON.stringify(user)\n      )\n\n      noteService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('wrong credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const loginForm = () => (\n    <Togglable buttonLabel='login'>\n      <LoginForm\n        username={username}\n        password={password}\n        handleUsernameChange={({ target }) => setUsername(target.value)}\n        handlePasswordChange={({ target }) => setPassword(target.value)}\n        handleSubmit={handleLogin}\n      />\n    </Togglable>\n  )\n\n  const noteForm = () => (\n    <Togglable buttonLabel='new note' ref={noteFormRef}>\n      <NoteForm createNote={addNote} />\n    </Togglable>\n  )\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n\n      {user === null ?\n        loginForm() :\n        <div>\n          <p>{user.name} logged in</p>\n          {noteForm()}\n        </div>\n      }\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) =>\n          <Note\n            key={i}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}